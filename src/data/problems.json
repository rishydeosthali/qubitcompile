{
  "1": {
    "title": "Quantum Superposition with Qiskit",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "87.3%",
    "likes": 142,
    "time": "~15 min",
    "submissions": "12",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Using Qiskit, create a single-qubit quantum circuit that prepares the |1⟩ state from the default |0⟩ state by applying the Pauli-X gate. The circuit should then be simulated to confirm the correct measurement result.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_one_state_circuit():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_circuit(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The quantum circuit to simulate</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured state: 1\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_one_state_circuit():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a single-qubit circuit that prepares the |1> state using the X gate.\n    pass\n\n\ndef simulate_circuit(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the circuit and return the most frequent measurement outcome.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = create_one_state_circuit()\n    result = simulate_circuit(qc, shots)\n    print(\"Measured state:\", result)  # Expected: 1",
    "expectedOutput": "Measured state: 1"
  },
  "2": {
    "title": "Hadamard Superposition",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "85.6%",
    "likes": 120,
    "time": "~20 min",
    "submissions": "10",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a quantum circuit that applies a Hadamard gate to a single qubit to place it into an equal superposition of |0⟩ and |1⟩. Then simulate the circuit to confirm that both states appear with nearly equal probability.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_hadamard_circuit():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_superposition(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The quantum circuit to simulate</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Probability of 0: ~0.5<br/>\n    Probability of 1: ~0.5\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_hadamard_circuit():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a circuit that applies a Hadamard gate to a single qubit.\n    pass\n\n\ndef simulate_superposition(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate the circuit and return measurement probabilities.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1000\n    qc = create_hadamard_circuit()\n    result = simulate_superposition(qc, shots)\n    print(\"Probability of 0:\", round(result['0'], 1))  # Expected: ~0.5\n    print(\"Probability of 1:\", round(result['1'], 1))  # Expected: ~0.5",
    "expectedOutput": "Probability of 0: 0.5\n  Probability of 1: 0.5"
  },
  "3": {
    "title": "Two-Qubit Entanglement",
    "difficulty": "easy",
    "category": "Quantum Entanglement",
    "acceptance": "82.4%",
    "likes": 133,
    "time": "~20 min",
    "submissions": "19",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Construct a two-qubit quantum circuit that creates a Bell state |Φ+⟩ = (|00⟩ + |11⟩)/√2 using a Hadamard gate and a CNOT gate. Then simulate to confirm correlated measurement results.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_bell_state():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_bell_state(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The quantum circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured pairs: ['00','11']  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_bell_state():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a circuit that generates the Bell state (|00> + |11>)/sqrt(2).\n    pass\n\n\ndef simulate_bell_state(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate the Bell state circuit and return measurement counts.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1000\n    qc = create_bell_state()\n    result = simulate_bell_state(qc, shots)\n    print(\"Measured pairs:\", list(result.keys()))  # Expected: ['00','11']",
    "expectedOutput": "Measured pairs: ['00','11']"
  },
  "4": {
    "title": "Quantum NOT Gate",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "90.1%",
    "likes": 115,
    "time": "~10 min",
    "submissions": "40",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Build a single-qubit circuit that applies the Pauli-X gate to flip |0⟩ into |1⟩ and |1⟩ into |0⟩. Verify the correctness of the operation through simulation.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_x_gate(initial_state):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>initial_state</code> (int): Initial state of the qubit (0 or 1)</li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_not_gate(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The quantum circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    initial_state = 0<br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured state: 1\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef apply_x_gate(initial_state):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a circuit applying X gate to flip the given initial state.\n    pass\n\n\ndef simulate_not_gate(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the circuit and return the measured state.\n    pass\n\n\nif __name__ == \"__main__\":\n    initial_state = 0\n    shots = 1024\n    qc = apply_x_gate(initial_state)\n    result = simulate_not_gate(qc, shots)\n    print(\"Measured state:\", result)  # Expected: 1",
    "expectedOutput": "Measured state: 1"
  },
"5": {
  "title": "Z Gate Phase Flip",
  "difficulty": "easy",
  "category": "Quantum Gates",
  "acceptance": "83.2%",
  "likes": 101,
  "time": "~15 min",
  "submissions": "30",
  "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a circuit that applies the Pauli-Z gate to a qubit that is first put into a superposition using a Hadamard gate. The Z gate flips the phase of the <code>|1⟩</code> component while leaving <code>|0⟩</code> unchanged. Applying the Hadamard first allows the phase difference introduced by the Z gate to exist relative to <code>|0⟩</code>, while the measurement probabilities of the states themselves remain unchanged.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_z_gate():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_phase_flip(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The quantum circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Probability of 0: ~0.5<br/>\n    Probability of 1: ~0.5<br/>\n    <em>(Note: The Z gate flips the phase of |1⟩ relative to |0⟩, but the probabilities remain roughly equal when measured immediately.)</em>\n  </div>\n</div>",
  "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef apply_z_gate():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a circuit applying the Z gate to flip the phase of |1>.\n    pass\n\n\ndef simulate_phase_flip(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate the circuit and return measurement probabilities.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = apply_z_gate()\n    result = simulate_phase_flip(qc, shots)\n    print(\"Probability of 0:\", round(result['0'], 1))  # Expected: 0.5\n    print(\"Probability of 1:\", round(result['1'], 1))  # Expected: 0.5"
  ,"expectedOutput": "Probability of 0: 0.5\n  Probability of 1: 0.5"
},

"6": {
  "title": "Toffoli Gate Control",
  "difficulty": "easy",
  "category": "Quantum Gates",
  "acceptance": "79.5%",
  "likes": 95,
  "time": "~20 min",
  "submissions": "35",
  "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Construct a 3-qubit circuit with two control qubits initialized to |1⟩ and a target initialized to |0⟩. Apply the Toffoli (CCX) gate and simulate the circuit to observe the effect on the target qubit.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_toffoli_circuit():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_toffoli(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The quantum circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured state: 111\n  </div>\n</div>",
  "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_toffoli_circuit():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a 3-qubit circuit with two controls in |1> and a target in |0>, then apply CCX.\n    pass\n\n\ndef simulate_toffoli(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the Toffoli circuit and return the most frequent measured state.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = create_toffoli_circuit()\n    result = simulate_toffoli(qc, shots)\n    print(\"Measured state:\", result)  # Expected: 111"
  ,"expectedOutput": "Measured state: 111"
},

  "7": {
    "title": "SWAP Gate",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "84.7%",
    "likes": 95,
    "time": "~15 min",
    "submissions": "21",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a two-qubit quantum circuit where the first qubit is initialized to |1⟩. Apply a SWAP gate to exchange the states of the two qubits. Verify via simulation that the final state is |01⟩.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_swap_circuit():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_swap(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured state: 01\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_swap_circuit():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a two-qubit circuit and apply a SWAP gate.\n    pass\n\n\ndef simulate_swap(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the circuit and return the measured state.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = create_swap_circuit()\n    result = simulate_swap(qc, shots)\n    print(\"Measured state:\", result)  # Expected: 01"
    ,"expectedOutput": "Measured state: 01"
  },
  "8": {
    "title": "Toffoli (CCX) Gate",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "81.9%",
    "likes": 102,
    "time": "~20 min",
    "submissions": "24",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a three-qubit quantum circuit where the first two qubits are initialized to |1⟩. Apply a Toffoli (CCX) gate with the first two as controls and the third as target. Simulate the circuit to confirm the final state is |110⟩.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_toffoli_circuit():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_toffoli(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured state: 110\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_toffoli_circuit():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a three-qubit circuit applying a Toffoli (CCX) gate.\n    pass\n\n\ndef simulate_toffoli(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the circuit and return the measured state.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = create_toffoli_circuit()\n    result = simulate_toffoli(qc, shots)\n    print(\"Measured state:\", result)  # Expected: 110"
    ,"expectedOutput": "Measured state: 110"
  },
  "9": {
    "title": "Phase Gate Superposition",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "80.5%",
    "likes": 88,
    "time": "~15 min",
    "submissions": "34",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a single-qubit circuit that places the qubit into superposition using H, applies an S (phase) gate, then applies H again. Verify by simulation that the probabilities of measuring |0⟩ and |1⟩ remain approximately equal (~0.5 each).</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_phase_gate_circuit():</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>None</code></li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_phase_gate(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Probability of 0: 0.5<br/>\n    Probability of 1: 0.5\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_phase_gate_circuit():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a circuit with H, S, and H applied to one qubit.\n    pass\n\n\ndef simulate_phase_gate(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate the circuit and return measurement probabilities.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1000\n    qc = create_phase_gate_circuit()\n    result = simulate_phase_gate(qc, shots)\n    print(\"Probability of 0:\", result['0'])  # Expected: ~0.5\n    print(\"Probability of 1:\", result['1'])  # Expected: ~0.5"
    ,"expectedOutput": "Probability of 0: 0.5\n  Probability of 1: 0.5"
  },
  "10": {
    "title": "Mini Quantum Fourier Transform",
    "difficulty": "easy",
    "category": "Quantum Fourier Transform",
    "acceptance": "77.8%",
    "likes": 92,
    "time": "~25 min",
    "submissions": "12",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a two-qubit circuit that applies the first steps of a Quantum Fourier Transform (QFT). Apply Hadamard gates and controlled phase rotations, then measure. Verify via simulation that all states {00,01,10,11} appear.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_qft_circuit(n):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>n</code> (int): Number of qubits</li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_qft(circuit, shots):</strong>\n      <div class=\"task-args\">\n        <strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 512<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured states: ['00','01','10','11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile, assemble\n\n\ndef create_qft_circuit(n):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a small QFT circuit for n qubits.\n    pass\n\n\ndef simulate_qft(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate the QFT circuit and return observed states.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 512\n    qc = create_qft_circuit(2)\n    result = simulate_qft(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['00','01','10','11']"
    ,"expectedOutput": "Measured states: ['00','01','10','11']"
  },

  "11": {
    "title": "Build GHZ State",
    "difficulty": "easy",
    "category": "Entanglement",
    "acceptance": "78.5%",
    "likes": 145,
    "time": "~25 min",
    "submissions": "8",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a 3-qubit GHZ state (|000⟩ + |111⟩)/√2 by applying a Hadamard on qubit 0 followed by CNOTs. Then measure and report the observed states.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_ghz_state():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li>None</li>\n        </ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_ghz(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): The GHZ circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured states: ['000','111']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef create_ghz_state():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a 3-qubit GHZ state using H and CNOT gates.\n    pass\n\n\ndef simulate_ghz(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate the circuit and return sorted observed states.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = create_ghz_state()\n    result = simulate_ghz(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['000','111']"
    ,"expectedOutput": "Measured states: ['000','111']"
  },
  "12": {
    "title": "Verify Entanglement with Correlation Check",
    "difficulty": "easy",
    "category": "Entanglement",
    "acceptance": "76.2%",
    "likes": 132,
    "time": "~20 min",
    "submissions": "17",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a Bell pair and verify entanglement by checking that only correlated outcomes (00 and 11) appear.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_bell_pair():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li>None</li>\n        </ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>verify_correlation(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Bell state circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Correlation verified: True\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef create_bell_pair():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a Bell pair using H and CNOT.\n    pass\n\n\ndef verify_correlation(circuit, shots):\n    # Returns:\n    #    bool\n    # Description:\n    #    Simulate the circuit and return True if only correlated outcomes appear.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1000\n    qc = create_bell_pair()\n    result = verify_correlation(qc, shots)\n    print(\"Correlation verified:\", result)  # Expected: True"
    ,"expectedOutput": "Correlation verified: True"
  },
  "13": {
    "title": "Encode Classical Bit in Qubit State",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "85.0%",
    "likes": 120,
    "time": "~10 min",
    "submissions": "10",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Encode a classical bit (0 or 1) into a single qubit using an X gate for bit=1, then measure to retrieve the bit.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>encode_bit(bit):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>bit</code> (int): 0 or 1 classical bit to encode</li>\n        </ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_encoding(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Encoding circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    bit = 1, shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured bit: 1\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef encode_bit(bit):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Encode a classical bit into a single-qubit circuit.\n    pass\n\n\ndef simulate_encoding(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the circuit and return the most frequent measured bit as a string.\n    pass\n\n\nif __name__ == \"__main__\":\n    bit = 1\n    shots = 1024\n    qc = encode_bit(bit)\n    result = simulate_encoding(qc, shots)\n    print(\"Measured bit:\", result)  # Expected: 1"
    ,"expectedOutput": "Measured bit: 1"
  },
  "14": {
    "title": "Implement Quantum NOT (X) Gate",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "88.0%",
    "likes": 135,
    "time": "~10 min",
    "submissions": "14",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Apply a Pauli-X gate to flip a qubit initialized to |0⟩ into |1⟩, then measure to confirm the flip.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_x_gate():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_not(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Circuit with X gate</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured state: 1\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef apply_x_gate():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a circuit that applies an X gate to a single qubit.\n    pass\n\n\ndef simulate_not(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate the circuit and return the most frequent measured state.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = apply_x_gate()\n    result = simulate_not(qc, shots)\n    print(\"Measured state:\", result)  # Expected: 1"
    ,"expectedOutput": "Measured state: 1"
  },
  "15": {
    "title": "Prepare Arbitrary Single-Qubit State",
    "difficulty": "easy",
    "category": "State Preparation",
    "acceptance": "72.0%",
    "likes": 150,
    "time": "~25 min",
    "submissions": "68",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Prepare an arbitrary single-qubit state using Ry and Rz rotations specified by angles θ and φ. Simulate and report measurement probabilities.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>prepare_state(theta, phi):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>theta</code> (float): polar rotation angle</li>\n          <li><code>phi</code> (float): azimuthal rotation angle</li>\n        </ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_state(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Prepared state circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    theta = 1.57, phi = 0, shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Probability of 0: 0.5<br/>\n    Probability of 1: 0.5\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef prepare_state(theta, phi):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Prepare a single-qubit state using Ry(theta) and Rz(phi).\n    pass\n\n\ndef simulate_state(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate the circuit and return measurement probabilities as a dict.\n    pass\n\n\nif __name__ == \"__main__\":\n    theta = 1.57\n    phi = 0\n    shots = 1000\n    qc = prepare_state(theta, phi)\n    result = simulate_state(qc, shots)\n    print(\"Probability of 0:\", round(result['0'], 1))  # Expected: ~0.5\n    print(\"Probability of 1:\", round(result['1'], 1))  # Expected: ~0.5"
    ,"expectedOutput": "Probability of 0: 0.5\n  Probability of 1: 0.5"
  },
  "16": {
    "title": "Apply Rx(π/2) Rotation",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "80.0%",
    "likes": 128,
    "time": "~15 min",
    "submissions": "17",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Apply an Rx rotation by π/2 to a single qubit and measure the probabilities of |0⟩ and |1⟩.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_rx_rotation():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_rx(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Circuit with Rx gate</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Probability of 0 ~0.5<br/>\n    Probability of 1 ~0.5\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\nimport math\n\n\ndef apply_rx_rotation():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Apply Rx(pi/2) rotation to a single qubit and measure.\n    pass\n\n\ndef simulate_rx(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate the circuit and return measurement probabilities.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1000\n    qc = apply_rx_rotation()\n    result = simulate_rx(qc, shots)\n    print(\"Probability of 0:\", round(result['0'], 2))  # Expected: ~0.5\n    print(\"Probability of 1:\", round(result['1'], 2))  # Expected: ~0.5"
    ,"expectedOutput": [
      {
        "state": "0",
        "operator": "~",
        "value": 0.5,
        "description": "Probability of 0:"
      },
      {
        "state": "1",
        "operator": "~",
        "value": 0.5,
        "description": "Probability of 1:"
      }
    ]
  },
  "17": {
    "title": "Uniform Superposition over 3 Qubits",
    "difficulty": "easy",
    "category": "Superposition",
    "acceptance": "74.0%",
    "likes": 140,
    "time": "~20 min",
    "submissions": "18",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Create a uniform superposition across 3 qubits (apply H to each) and measure the outcomes.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>create_superposition():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_superposition(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Superposition circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured states: ['000','001','010','011','100','101','110','111']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef create_superposition():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a 3-qubit uniform superposition using H gates.\n    pass\n\n\ndef simulate_superposition(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate the circuit and return the list of observed states.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = create_superposition()\n    result = simulate_superposition(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['000','001','010','011','100','101','110','111']"
    ,"expectedOutput": "Measured states: ['000','001','010','011','100','101','110','111']"
  },
  "18": {
    "title": "Implement Controlled-Z Gate",
    "difficulty": "easy",
    "category": "Quantum Gates",
    "acceptance": "70.0%",
    "likes": 125,
    "time": "~20 min",
    "submissions": "61",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Apply a Controlled-Z (CZ) gate between two qubits (optionally prepare them in superposition) and measure outcomes.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_cz_gate():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_cz(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): CZ circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 512<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured states: ['00','01','10','11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef apply_cz_gate():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a 2-qubit circuit that applies CZ (optionally with H on inputs).\n    pass\n\n\ndef simulate_cz(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate the CZ circuit and return observed states.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 512\n    qc = apply_cz_gate()\n    result = simulate_cz(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['00','01','10','11']"
    ,"expectedOutput": "Measured states: ['00','01','10','11']"
  },
  "19": {
    "title": "Quantum Coin Toss (Hadamard)",
    "difficulty": "easy",
    "category": "Superposition",
    "acceptance": "86.0%",
    "likes": 160,
    "time": "~10 min",
    "submissions": "78",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Simulate a quantum coin toss: apply H to a single qubit and measure to get a random 0/1 outcome.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>quantum_coin_toss():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_coin(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Coin toss circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1000<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured states: ['0','1']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef quantum_coin_toss():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Create a single-qubit coin toss circuit using H and measure.\n    pass\n\n\ndef simulate_coin(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate coin toss and return observed states.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1000\n    qc = quantum_coin_toss()\n    result = simulate_coin(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['0','1']"
    ,"expectedOutput": "Measured states: ['0','1']"
  },
  "20": {
    "title": "Build Oracle for f(x)=x₀",
    "difficulty": "easy",
    "category": "Oracles",
    "acceptance": "70.0%",
    "likes": 140,
    "time": "~30 min",
    "submissions": "5.4K",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Construct an oracle for f(x)=x₀ using 2 qubits: prepare inputs in superposition, apply the oracle (flip target when first bit=1), and measure outputs.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_oracle():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_oracle(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): Oracle circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Measured states: ['00','01','10','11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_oracle():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build an oracle for f(x)=x0 with 2 qubits (prepare, apply oracle, measure).\n    pass\n\n\ndef simulate_oracle(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate the oracle circuit and return observed states.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = build_oracle()\n    result = simulate_oracle(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['00','01','10','11']"
    ,"expectedOutput": "Measured states: ['00','01','10','11']"
  },
  "21": {
    "title": "Implement Deutsch Algorithm (1-bit function)",
    "difficulty": "medium",
    "category": "Deutsch Algorithm",
    "acceptance": "66.0%",
    "likes": 180,
    "time": "~25 min",
    "submissions": "41",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Implement the Deutsch algorithm for a 1-bit Boolean function. Build an oracle for f(x)=x and use the circuit to decide if the function is constant or balanced.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_deutsch_oracle():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>run_deutsch(oracle, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Oracle implementing f(x)=x</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Result: balanced\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_deutsch_oracle():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build an oracle for f(x)=x using 1 input and 1 target qubit.\n    pass\n\n\ndef run_deutsch(oracle, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Run Deutsch algorithm with the oracle and return 'constant' or 'balanced'.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    oracle = build_deutsch_oracle()\n    result = run_deutsch(oracle, shots)\n    print(\"Result:\", result)  # Expected: balanced\n    #Expected : \"balanced\""
    ,"expectedOutput": "Result: balanced"
  },
  "22": {
    "title": "Extend Deutsch-Jozsa to 2 Qubits",
    "difficulty": "medium",
    "category": "Deutsch-Jozsa Algorithm",
    "acceptance": "63.5%",
    "likes": 150,
    "time": "~35 min",
    "submissions": "120",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Extend the Deutsch-Jozsa algorithm to 2 input qubits. Construct an oracle for f(x)=x0 XOR x1 and decide whether the function is constant or balanced.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_dj_oracle_2q():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>run_dj_2q(oracle, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Oracle circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 2048<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Result: balanced\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_dj_oracle_2q():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a 2-qubit oracle implementing f(x)=x0 XOR x1 (balanced function).\n    pass\n\n\ndef run_dj_2q(oracle, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Run the 2-qubit Deutsch-Jozsa circuit and return 'constant' or 'balanced'.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 2048\n    oracle = build_dj_oracle_2q()\n    result = run_dj_2q(oracle, shots)\n    print(\"Result:\", result)  # Expected: balanced\n    #Expected : \"balanced\""
    ,"expectedOutput": "Result: balanced"
  },
  "23": {
    "title": "Solve Hidden String with Bernstein-Vazirani",
    "difficulty": "medium",
    "category": "Bernstein-Vazirani",
    "acceptance": "62.0%",
    "likes": 175,
    "time": "~30 min",
    "submissions": "110",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Use the Bernstein-Vazirani algorithm to recover a hidden bitstring. The oracle encodes the secret by XORing input bits where the secret has 1s into a single target qubit.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_bv_oracle(secret):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li><code>secret</code> (str): Hidden bit string, e.g., '10'</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>run_bv(oracle, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): BV oracle</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    secret = '10'<br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Secret: 10\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_bv_oracle(secret):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a BV oracle that encodes the provided secret string into a target qubit.\n    pass\n\n\ndef run_bv(oracle, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Run Bernstein-Vazirani using the provided oracle and return the discovered secret string.\n    pass\n\n\nif __name__ == \"__main__\":\n    secret = '10'\n    shots = 1024\n    oracle = build_bv_oracle(secret)\n    found = run_bv(oracle, shots)\n    print(\"Secret:\", found)  # Expected: 10\n"
    ,"expectedOutput": "Secret: 10"
  },
  "24": {
    "title": "Build Oracle for Marked State |101⟩",
    "difficulty": "medium",
    "category": "Oracles / Grover",
    "acceptance": "61.5%",
    "likes": 160,
    "time": "~35 min",
    "submissions": "89",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Construct a phase oracle that marks the 3-qubit state |101⟩ by flipping its phase; this oracle will be used inside Grover's search.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_oracle_101():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_oracle_101(oracle, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Oracle circuit</li>\n          <li><code>shots</code> (int): Number of simulation shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Marked state detected: 101\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_oracle_101():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a phase oracle that flips the phase of |101> on 3 qubits.\n    pass\n\n\ndef simulate_oracle_101(oracle, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Apply the oracle to a test circuit and return the identified marked state as a string.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    oracle = build_oracle_101()\n    marked = simulate_oracle_101(oracle, shots)\n    print(\"Marked state detected:\", marked)  # Expected: 101\n    #Expected : \"101\""
    ,"expectedOutput": "Marked state detected: 101"
  },
  "25": {
    "title": "Run 1 Iteration of Grover’s Search",
    "difficulty": "medium",
    "category": "Grover's Algorithm",
    "acceptance": "60.0%",
    "likes": 155,
    "time": "~40 min",
    "submissions": "68",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Perform one iteration of Grover's algorithm on 3 qubits with marked state |101⟩: prepare uniform superposition, apply oracle and diffusion, then measure.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_grover_iteration(oracle):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li><code>oracle</code> (QuantumCircuit): Phase oracle for the marked state</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>run_grover_once(oracle, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Grover oracle</li>\n          <li><code>shots</code> (int): Number of shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Most frequent state: 101\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_grover_iteration(oracle):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a circuit performing one Grover iteration (oracle + diffusion) on 3 qubits.\n    pass\n\n\ndef run_grover_once(oracle, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Run one Grover iteration from uniform superposition and return the most frequent bitstring.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    oracle = build_oracle = None\n    result = run_grover_once(oracle, shots)\n    print(\"Most frequent state:\", result)  # Expected: 101\n    #Expected : \"101\""
    ,"expectedOutput": "Most frequent state: 101"
  },
  "26": {
    "title": "Amplify Success with Multiple Grover Iterations",
    "difficulty": "medium",
    "category": "Grover's Algorithm",
    "acceptance": "59.0%",
    "likes": 165,
    "time": "~50 min",
    "submissions": "32",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Apply multiple Grover iterations (e.g., 2 iterations) on a 3-qubit register to amplify the probability of the marked state |101⟩ and measure the result.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_grover_iterations(oracle, num_iter):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Phase oracle for the marked state</li>\n          <li><code>num_iter</code> (int): Number of Grover iterations to apply</li>\n        </ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>run_grover(oracle, num_iter, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Grover oracle</li>\n          <li><code>num_iter</code> (int): Iterations</li>\n          <li><code>shots</code> (int): Shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    num_iter = 2<br/>\n    shots = 2048<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Amplified state: 101\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_grover_iterations(oracle, num_iter):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a circuit that applies num_iter Grover iterations on 3 qubits using the given oracle.\n    pass\n\n\ndef run_grover(oracle, num_iter, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Execute Grover's algorithm for num_iter iterations and return the most frequent result.\n    pass\n\n\nif __name__ == \"__main__\":\n    num_iter = 2\n    shots = 2048\n    oracle = None\n    result = run_grover(oracle, num_iter, shots)\n    print(\"Amplified state:\", result)  # Expected: 101\n    #Expected : \"101\""
    ,"expectedOutput": "Amplified state: 101"
  },
  "27": {
    "title": "Implement Simon’s Algorithm for 2-bit Secret",
    "difficulty": "medium",
    "category": "Simon's Algorithm",
    "acceptance": "59.0%",
    "likes": 140,
    "time": "~60 min",
    "submissions": "2.9K",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Implement Simon's algorithm for n=2 to discover a 2-bit secret string s. Build a Simon oracle with the property f(x)=f(x⊕s), run the circuit, and deduce s.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_simon_oracle(secret):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li><code>secret</code> (str): 2-bit secret string</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>run_simon(oracle, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>oracle</code> (QuantumCircuit): Simon oracle</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    secret = '11'<br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Hidden period: 11\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_simon_oracle(secret):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a Simon oracle for n=2 that enforces f(x)=f(x xor secret).\n    pass\n\n\ndef run_simon(oracle, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Run Simon's algorithm using the provided oracle and return the discovered secret string.\n    pass\n\n\nif __name__ == \"__main__\":\n    secret = '11'\n    shots = 1024\n    oracle = build_simon_oracle(secret)\n    found = run_simon(oracle, shots)\n    print(\"Hidden period:\", found)  # Expected: 11\n    #Expected : \"11\""
    ,"expectedOutput": "Hidden period: 11"
  },
  "28": {
    "title": "Apply Quantum Fourier Transform on 2 Qubits",
    "difficulty": "medium",
    "category": "Quantum Fourier Transform",
    "acceptance": "56.0%",
    "likes": 135,
    "time": "~35 min",
    "submissions": "2.7K",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Build and apply a 2-qubit Quantum Fourier Transform (QFT) to a prepared computational basis state and return the statevector or measured results.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_qft_2q(circuit):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li><code>circuit</code> (QuantumCircuit): 2-qubit circuit prepared in some basis state</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_qft_2q(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): QFT circuit</li>\n          <li><code>shots</code> (int): Simulation shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    prepare |10>, shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Statevector: [0.5+0j, -0.5+0j, 0.5+0j, -0.5+0j]\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef apply_qft_2q(circuit):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Append a 2-qubit QFT to the provided circuit and return it.\n    pass\n\n\ndef simulate_qft_2q(circuit):\n    # Returns:\n    #    list\n    # Description:\n    #    Run the circuit on a statevector simulator and return the statevector as a list.\n    pass\n\n\nif __name__ == \"__main__\":\n    from qiskit import QuantumCircuit\n    qc = QuantumCircuit(2)\n    qc.x(1)  # prepare |10> (big-endian)\n    qc = apply_qft_2q(qc)\n    sv = simulate_qft_2q(qc)\n    print(\"Statevector:\", sv)  # Expected: [0.5+0j, -0.5+0j, 0.5+0j, -0.5+0j]\n    #Expected : \"[0.5+0j, -0.5+0j, 0.5+0j, -0.5+0j]\""
    ,"expectedOutput": "Statevector: [0.5+0j, -0.5+0j, 0.5+0j, -0.5+0j]"
  },
  "29": {
    "title": "Extend QFT to 3 Qubits",
    "difficulty": "medium",
    "category": "Quantum Fourier Transform",
    "acceptance": "55.0%",
    "likes": 130,
    "time": "~40 min",
    "submissions": "25",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Build and apply a 3-qubit QFT to a prepared basis state (e.g., |100⟩) and return the resulting statevector.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_qft_3q(circuit):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li><code>circuit</code> (QuantumCircuit): 3-qubit circuit prepared in some basis state</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_qft_3q(circuit):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): QFT circuit</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    prepare |100>, shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Statevector: [0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373]\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef apply_qft_3q(circuit):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Append a 3-qubit QFT to the provided circuit and return it.\n    pass\n\n\ndef simulate_qft_3q(circuit):\n    # Returns:\n    #    list\n    # Description:\n    #    Run the circuit on a statevector simulator and return the statevector as a list.\n    pass\n\n\nif __name__ == \"__main__\":\n    from qiskit import QuantumCircuit\n    qc = QuantumCircuit(3)\n    qc.x(2)  # prepare |100> (big-endian)\n    qc = apply_qft_3q(qc)\n    sv = simulate_qft_3q(qc)\n    print(\"Statevector:\", sv)  # Expected: [0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373]\n"
    ,"expectedOutput": "Statevector: [0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373, 0.35355339059327373, -0.35355339059327373]"
  },
    "30": {
    "title": "Build Inverse QFT Circuit (3 qubits)",
    "difficulty": "medium",
    "category": "Quantum Fourier Transform",
    "acceptance": "54.0%",
    "likes": 120,
    "time": "~40 min",
    "submissions": "139",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Implement the inverse Quantum Fourier Transform for 3 qubits. Apply QFT then inverse QFT to a basis state and verify the original state is recovered.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>apply_inverse_qft_3q(circuit):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li><code>circuit</code> (QuantumCircuit): 3-qubit circuit to append inverse QFT</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_inverse_qft(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): circuit to test inverse QFT</li>\n          <li><code>shots</code> (int): Number of simulation shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    prepare |110>, shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Recovered: 110\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef apply_inverse_qft_3q(circuit):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Append a 3-qubit inverse QFT to the provided circuit and return it.\n    pass\n\n\ndef simulate_inverse_qft(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Apply QFT then inverse QFT to |110> and return the recovered bitstring.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = QuantumCircuit(3)\n    qc.x(2)\n    qc.x(1)  # prepare |110>\n    qc = apply_inverse_qft_3q(qc)\n    result = simulate_inverse_qft(qc, shots)\n    print(\"Recovered:\", result)  # Expected: 110\n    #Expected : \"110\""
    ,"expectedOutput": "Recovered: 110"
  },
  "31": {
    "title": "Phase Estimation on Z Gate",
    "difficulty": "medium",
    "category": "Quantum Phase Estimation",
    "acceptance": "62.5%",
    "likes": 210,
    "time": "~40 min",
    "submissions": "63",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Apply Quantum Phase Estimation (QPE) to the Z gate, which has eigenvalues ±1 corresponding to phases 0 and 0.5. Use one eigenstate and one counting qubit to reveal the phase.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_phase_estimation():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_phase_estimation(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): QPE circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Estimated phase: 0.5\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_phase_estimation():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a QPE circuit to estimate eigenphase of Z gate using |1> as eigenstate.\n    pass\n\n\ndef simulate_phase_estimation(circuit, shots):\n    # Returns:\n    #    float\n    # Description:\n    #    Simulate the QPE circuit and return estimated phase.\n    pass\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = build_phase_estimation()\n    result = simulate_phase_estimation(qc, shots)\n    print(\"Estimated phase:\", result)  # Expected: 0.5"
    ,"expectedOutput": "Estimated phase: 0.5"
  },
  "32": {
    "title": "Estimate Eigenphase of Controlled-Unitary",
    "difficulty": "medium",
    "category": "Quantum Phase Estimation",
    "acceptance": "60.0%",
    "likes": 190,
    "time": "~45 min",
    "submissions": "59",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Perform QPE to estimate the eigenphase of a controlled-unitary gate with known eigenstate. Apply controlled-U operations and inverse QFT to estimate the phase.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_controlled_unitary_qpe():</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_controlled_unitary_qpe(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong>\n        <ul>\n          <li><code>circuit</code> (QuantumCircuit): QPE circuit</li>\n          <li><code>shots</code> (int): Number of measurement shots</li>\n        </ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots = 1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Eigenphase bitstring: 0 or 1 (roughly 50% each)\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_controlled_unitary_qpe():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build QPE circuit for controlled-unitary with one counting qubit.\n    pass\n\n\ndef simulate_controlled_unitary_qpe(circuit, shots):\n    # Returns:\n    #    str\n    # Description:\n    #    Simulate circuit and return measured eigenphase bitstring.\n    pass\n\nif __name__ == \"__main__\":\n    shots = 1024\n    qc = build_controlled_unitary_qpe()\n    result = simulate_controlled_unitary_qpe(qc, shots)\n    print(\"Eigenphase bitstring:\", result)  # Expected: 0 or 1 (roughly 50% each)"
    ,"expectedOutput": ["Eigenphase bitstring: 0", "Eigenphase bitstring: 1"]
  },
  "33": {
    "title": "Demonstrate Phase Kickback",
    "difficulty": "medium",
    "category": "Quantum Fundamentals",
    "acceptance": "68.0%",
    "likes": 250,
    "time": "~30 min",
    "submissions": "72",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Show the phase kickback effect by applying a controlled-U gate where the target remains unchanged but the control acquires a phase. Demonstrate measurable difference compared to no-kickback case.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_phase_kickback():</strong>\n      <div class=\"task-args\"><strong>Args:</strong><ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_phase_kickback(circuit, shots):</strong>\n      <div class=\"task-args\"><strong>Args:</strong><ul><li><code>circuit</code> (QuantumCircuit): Kickback circuit</li><li><code>shots</code> (int): Measurement shots</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>\n    shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/>\n    Control qubit distribution: {'0': 0.0, '1': 1.0}\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_phase_kickback():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a circuit showing phase kickback via controlled-Z.\n    pass\n\n\ndef simulate_phase_kickback(circuit, shots):\n    # Returns:\n    #    dict\n    # Description:\n    #    Simulate and return control qubit measurement distribution.\n    pass\n\nif __name__ == \"__main__\":\n    shots=1024\n    qc=build_phase_kickback()\n    result=simulate_phase_kickback(qc, shots)\n    print(\"Control qubit distribution:\", result)  # Expected: {'0': 0.0, '1': 1.0}"
    ,"expectedOutput": "Control qubit distribution: {'0': 0.0, '1': 1.0}"
  },
  "34": {
    "title": "Prepare Even-State Superposition",
    "difficulty": "medium",
    "category": "State Preparation",
    "acceptance": "53.0%",
    "likes": 260,
    "time": "~25 min",
    "submissions": "94",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Prepare a superposition over only even basis states (00,10,...) on 2 qubits using Hadamards and controlled-X gates.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_even_superposition():</strong>\n      <div class=\"task-args\"><ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_even_superposition(circuit, shots):</strong>\n      <div class=\"task-args\"><ul><li><code>circuit</code> (QuantumCircuit): Circuit to prepare state</li><li><code>shots</code> (int): Shots to measure</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/> Measured states: ['00', '11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_even_superposition():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build circuit producing equal superposition over |00>,|10>.\n    pass\n\n\ndef simulate_even_superposition(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate and return states created.\n    pass\n\nif __name__ == \"__main__\":\n    shots=1024\n    qc=build_even_superposition()\n    result=simulate_even_superposition(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['00', '11']"
    ,"expectedOutput": "Measured states: ['00', '11']"
  },

  "35": {
    "title": "Encode Data with Angle Encoding",
    "difficulty": "medium",
    "category": "Quantum Machine Learning",
    "acceptance": "65.0%",
    "likes": 230,
    "time": "~35 min",
    "submissions": "61",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Encode classical real-valued data into a quantum state using angle encoding where each feature applies a Ry rotation on a separate qubit.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>angle_encode(data):</strong>\n      <div class=\"task-args\"><ul><li><code>data</code> (list): List of float values representing rotation angles</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_encoding(circuit, shots):</strong>\n      <div class=\"task-args\"><ul><li><code>circuit</code> (QuantumCircuit): Encoding circuit</li><li><code>shots</code> (int): Number of shots for simulation</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>data=[1.57, 0.78], shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/>Measured states: ['00', '01', '10', '11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef angle_encode(data):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a quantum circuit applying Ry rotations for each feature.\n    pass\n\n\ndef simulate_encoding(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate the encoding circuit and return the measured state labels.\n    pass\n\n\nif __name__ == \"__main__\":\n    data=[1.57,0.78]\n    shots=1024\n    qc=angle_encode(data)\n    result=simulate_encoding(qc, shots)\n    print(\"Measured states:\", result)  # Expected: ['00', '01', '10', '11']",
    "expectedOutput": "Measured states: ['00', '01', '10', '11']"
  },
  "36": {
    "title": "Build Variational Ansatz with Ry Rotations",
    "difficulty": "medium",
    "category": "Variational Circuits",
    "acceptance": "67.0%",
    "likes": 245,
    "time": "~40 min",
    "submissions": "56",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Construct a 2-qubit variational ansatz using Ry rotations and a CNOT entangler. Each input parameter defines the rotation angle applied to one qubit.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_ansatz(params):</strong>\n      <div class=\"task-args\"><ul><li><code>params</code> (list): List of rotation angles</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_ansatz(circuit, shots):</strong>\n      <div class=\"task-args\"><ul><li><code>circuit</code> (QuantumCircuit): Ansatz circuit</li><li><code>shots</code> (int): Number of measurement shots</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>params=[1.57, 0.78], shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/>Ansatz states: ['00', '01', '10', '11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_ansatz(params):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Construct a 2-qubit variational ansatz with Ry rotations and CNOT entanglement.\n    pass\n\n\ndef simulate_ansatz(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate ansatz circuit and return the measured state labels.\n    pass\n\n\nif __name__ == \"__main__\":\n    params=[1.57,0.78]\n    shots=1024\n    qc=build_ansatz(params)\n    result=simulate_ansatz(qc, shots)\n    print(\"Ansatz states:\", result)  # Expected: ['00', '01', '10', '11']",
    "expectedOutput": "Ansatz states: ['00', '01', '10', '11']"
  },
  "37": {
    "title": "Optimize Parameters with Classical Loop",
    "difficulty": "medium",
    "category": "Variational Algorithms",
    "acceptance": "59.0%",
    "likes": 195,
    "time": "~50 min",
    "submissions": "49",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Implement a simple optimization loop to tune an Ry gate angle over multiple iterations to maximize measurement probability of the |0> state.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>optimize_params(iterations):</strong>\n      <div class=\"task-args\"><ul><li><code>iterations</code> (int): Number of optimization iterations</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>iterations=10<br/><br/>\n    <strong>Expected Output:</strong><br/>Final optimized probability of |0>: > 0.95\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\nimport numpy as np\n\n\ndef optimize_params(iterations):\n    # Returns:\n    #    float\n    # Description:\n    #    Optimize the Ry rotation parameter to maximize |0> probability after measurement.\n    pass\n\n\nif __name__ == \"__main__\":\n    iterations=10\n    result=optimize_params(iterations)\n    print(\"Final optimized probability of |0>:\", result)  # Expected: > 0.95",
    "expectedOutput": {
      "state": "0",
      "operator": ">",
      "value": 0.95,
      "description": "Probability of measuring |0>: "
    }
  },
  "38": {
    "title": "Calculate Expectation Value of Z",
    "difficulty": "medium",
    "category": "Observables",
    "acceptance": "64.0%",
    "likes": 225,
    "time": "~30 min",
    "submissions": "79",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Prepare a single-qubit state with an Ry rotation and calculate the expectation value of the Z operator by measuring counts in the Z basis.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>calculate_expectation(theta, shots):</strong>\n      <div class=\"task-args\"><ul><li><code>theta</code> (float): Rotation angle</li><li><code>shots</code> (int): Number of measurement shots</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>theta=1.57, shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/>Expectation value: 0.0\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef calculate_expectation(theta, shots):\n    # Returns:\n    #    float\n    # Description:\n    #    Compute the expectation value of Z from a single-qubit Ry state measurement.\n    pass\n\n\nif __name__ == \"__main__\":\n    theta=1.57\n    shots=1024\n    result=calculate_expectation(theta, shots)\n    print(\"Expectation value:\", result)  # Expected: 0.0",
    "expectedOutput": ["Expectation value: 0.0","Expectation value: -0.0"]
  },
  "39": {
  "title": "Run Noisy Circuit Simulation",
  "difficulty": "medium",
  "category": "Noise Simulation",
  "acceptance": "61.0%",
  "likes": 215,
  "time": "~35 min",
  "submissions": "55",
  "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Simulate a 2-qubit Bell state under depolarizing noise and measure how noise affects the resulting state probabilities.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_bell_state():</strong>\n      <div class=\"task-args\"><ul><li>None</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_noisy(circuit, shots):</strong>\n      <div class=\"task-args\"><ul><li><code>circuit</code> (QuantumCircuit): Bell circuit</li><li><code>shots</code> (int): Number of shots for measurement</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/>Noisy measured states: ['00', '01', '10', '11']<br/>Probability of |00>: 0.4\n  </div>\n</div>",
  "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\nfrom qiskit.providers.aer import noise\n\n\ndef build_bell_state():\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Construct a 2-qubit Bell state using H and CNOT gates.\n    pass\n\n\ndef simulate_noisy(circuit, shots):\n    # Returns:\n    #    tuple\n    # Description:\n    #    Run the Bell circuit under depolarizing noise and return measured states and probability of |00>.\n    pass\n\n\nif __name__ == \"__main__\":\n    shots=1024\n    qc=build_bell_state()\n    states,prob_00=simulate_noisy(qc, shots)\n    print(\"Noisy measured states:\", states)\n    print(\"Probability of |00>:\", prob_00)  # Expected: > 0.4",
  "solution": "from qiskit import QuantumCircuit, Aer, transpile\nfrom qiskit.providers.aer import noise\n\n\ndef build_bell_state():\n    qc = QuantumCircuit(2,2)\n    qc.h(0)\n    qc.cx(0,1)\n    qc.measure([0,1],[0,1])\n    return qc\n\n\ndef simulate_noisy(circuit, shots):\n    noise_model = noise.NoiseModel()\n    error1 = noise.errors.depolarizing_error(0.05, 1)\n    error2 = noise.errors.depolarizing_error(0.02, 2)\n    noise_model.add_all_qubit_quantum_error(error1, ['u3'])\n    noise_model.add_all_qubit_quantum_error(error2, ['cx'])\n\n    simulator = Aer.get_backend('qasm_simulator')\n    transpiled = transpile(circuit, simulator)\n    result = simulator.run(transpiled, shots=shots, noise_model=noise_model).result()\n    counts = result.get_counts()\n    states = sorted(list(counts.keys()))\n    prob_00 = round(counts.get('00',0)/shots, 2)\n    return states, prob_00\n\n\nif __name__ == \"__main__\":\n    shots=1024\n    qc=build_bell_state()\n    states,prob_00=simulate_noisy(qc, shots)\n    print(\"Noisy measured states:\", states)\n    print(\"Probability of |00>:\", prob_00)  # Expected: > 0.4",
  "expectedOutput": {
    "state": "|00>",
    "operator": ">",
    "value": 0.4,
    "description": "Noisy measured states: ['00', '01', '10', '11']\n Probability of |00>:"
  }
  },

  "40": {
    "title": "Simple VQE Ansatz for H₂ Molecule",
    "difficulty": "medium",
    "category": "Variational Quantum Algorithms",
    "acceptance": "55.0%",
    "likes": 220,
    "time": "~60 min",
    "submissions": "42",
    "description": "<div class=\"problem-content\">\n  <h2>Problem Statement</h2>\n  <p>Build a 2-qubit Ry-CNOT ansatz for approximating the ground state of the H₂ molecule and return the most probable state from simulation.</p>\n  <h2>Tasks</h2>\n  <div class=\"task-list\">\n    <div class=\"task-item\">\n      <strong>build_h2_ansatz(params):</strong>\n      <div class=\"task-args\"><ul><li><code>params</code> (list): Rotation angles for qubits</li></ul></div>\n    </div>\n    <div class=\"task-item\">\n      <strong>simulate_ansatz(circuit, shots):</strong>\n      <div class=\"task-args\"><ul><li><code>circuit</code> (QuantumCircuit): Ansatz circuit</li><li><code>shots</code> (int): Number of shots for measurement</li></ul></div>\n    </div>\n  </div>\n  <h2>Test Case</h2>\n  <div class=\"code-example\">\n    <strong>Input:</strong><br/>params=[1.57, 0.78], shots=1024<br/><br/>\n    <strong>Expected Output:</strong><br/>Measured dominant states: ['00'] or ['11']\n  </div>\n</div>",
    "starterCode": "from qiskit import QuantumCircuit, Aer, transpile\n\n\ndef build_h2_ansatz(params):\n    # Returns:\n    #    QuantumCircuit\n    # Description:\n    #    Build a 2-qubit variational ansatz for H₂ with Ry rotations and CNOT.\n    pass\n\n\ndef simulate_ansatz(circuit, shots):\n    # Returns:\n    #    list\n    # Description:\n    #    Simulate ansatz and return the most probable measured state.\n    pass\n\n\nif __name__ == \"__main__\":\n    params=[1.57,0.78]\n    shots=1024\n    qc=build_h2_ansatz(params)\n    result=simulate_ansatz(qc, shots)\n    print(\"Measured dominant states:\", result)  # Expected: ['00'] or ['11']",
    "expectedOutput": ["Measured dominant states: ['00']", "Measured dominant states: ['11']"]
  }
}

